package kr.co.kitri04.cont;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import kr.co.kitri04.model.BoardDao;
import kr.co.kitri04.model.BoardDto;

/**
 * Servlet implementation class BoardWriteCont
 */
@WebServlet("/write.do")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, maxFileSize = 1024 * 1024 * 10, maxRequestSize = 1024 * 1024 * 50)
public class BoardWriteCont extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		System.out.println(request.getRemoteAddr());
		// DB에 실제 값을 전달하여 입력할 수 있는 기능의 컨트롤러
		// DML 문 실행 시 접근할 컨트롤러
		// Code값 호출 = p_code
		//
		request.setCharacterEncoding("EUC-KR");
		response.setCharacterEncoding("EUC-KR");
		String p_code = request.getParameter("p_code");
		if (p_code.equals("write_ok")) {
			// Create a factory for disk-based file items

			// board_input.jsp 에서 받아 올 파라미터값을
			// 세팅하여 Dao를 통해 실행
			BoardDto bDto = new BoardDto();
			bDto.setTitle(request.getParameter("title"));
			bDto.setWriter(request.getParameter("writer"));
			bDto.setPassword(request.getParameter("password"));
			bDto.setPds_link(request.getParameter("pds_link"));
			System.out.println(request.getParameter("pds_link"));
			bDto.setContents(request.getParameter("contents"));

			// bDto를 DAO 전달한 후 DB 전송
			BoardDao bd = new BoardDao();
			int chk = bd.writeContents(bDto);
			// 글 목록으로 갈 수 있도록 구성
			if (chk == 1) {
				response.sendRedirect("read.do?p_code=list");
			} else {

			}
		} else if (p_code.equals("modify_ok"))

		{
			// 수정 작업 완료 시키기
			BoardDto bDto = new BoardDto();
			bDto.setBoard_id(Integer.parseInt(request.getParameter("p_bid")));
			bDto.setTitle(request.getParameter("title"));
			bDto.setWriter(request.getParameter("writer"));
			bDto.setPassword(request.getParameter("password"));
			bDto.setPds_link(request.getParameter("pds_link"));
			bDto.setContents(request.getParameter("contents"));

			// 수정 될 값 Dao 에 전달
			BoardDao bd = new BoardDao();
			int chk = bd.modifyContents(bDto);
			if (chk == 1) {
				response.sendRedirect("read.do?p_code=contents&b_id=" + bDto.getBoard_id());
			} else {

			}

		} else if (p_code.equals("delete_ok")) {
			String b_id = request.getParameter("p_bid");
			BoardDao bDao = new BoardDao();
			int chk = bDao.delContents(b_id);

			if (chk == 1) {
				response.sendRedirect("read.do?p_code=list");
			} else {

			}
		} else if (p_code.equals("rep_write_ok")) {
			String b_id = request.getParameter("p_bid");

			BoardDto bDto = new BoardDto();
			bDto.setBoard_id(Integer.parseInt(b_id));
			bDto.setTitle(request.getParameter("title"));
			bDto.setWriter(request.getParameter("writer"));
			bDto.setPassword(request.getParameter("password"));
			bDto.setPds_link(request.getParameter("pds_link"));
			bDto.setContents(request.getParameter("contents"));

			BoardDao bDao = new BoardDao();
			int chk = bDao.rep_writeContents(bDto);
			if (chk == 1) {
				response.sendRedirect("read.do?p_code=list");
			} else {

			}

		}

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");

		String p_code = request.getParameter("p_code");
		if (p_code.equals("write_ok")) {
			System.out.println("Write_ok_Post 실행");
			boolean isMultipart = ServletFileUpload.isMultipartContent(request); 
			if (isMultipart) { // multipart로 전송 되었을 경우
				File temporaryDir = new File("c:\\uploads\\"); 
				String realDir = request.getServletContext().getRealPath("/uploadFiles/"); 
				DiskFileItemFactory factory = new DiskFileItemFactory();
				factory.setSizeThreshold(1 * 1024 * 1024); // 1메가가 넘지 않으면 메모리에서
															// 바로 사용
				factory.setRepository(temporaryDir); // 1메가 이상이면 temporaryDir 경로
														// 폴더로 이동
				// 실제 구현단계 아님 설정단계였음
				ServletFileUpload upload = new ServletFileUpload(factory);
				upload.setSizeMax(10 * 1024 * 1024); // 최대 파일 크기(10M)
				List<FileItem> items = null;
				try {
					items = upload.parseRequest(request);
				} catch (FileUploadException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
				Iterator<FileItem> iter = items.iterator(); // Iterator 사용
				while (iter.hasNext()) {
					FileItem fileItem = (FileItem) iter.next(); // 파일을 가져온다

					if (fileItem.isFormField()) { // 업로드도니 파일이 text형태인지 다른 형태인지
													// 체크
													// text형태면 if문에 걸림						
					} else { // 파일이면 이부분의 루틴을 탄다
						if (fileItem.getSize() > 0) { // 파일이 업로드 되었나 안되었나 체크
														// size>0이면 업로드 성공
							String fieldName = fileItem.getFieldName();
							String fileName = fileItem.getName();
							String contentType = fileItem.getContentType();
							boolean isInMemory = fileItem.isInMemory();
							long sizeInBytes = fileItem.getSize();
							File uploadedFile = new File(realDir, fileName); 
							try {
								fileItem.write(uploadedFile);
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							fileItem.delete(); // 카피 완료후 temp폴더의 temp파일을 제거
						}
					}
				}
			} else {
				PrintWriter out = response.getWriter();
				out.println("인코딩 타입이 multipart/form-data 가 아님.");
			}

		}
		doGet(request, response);
	}

	private void move(HttpServletRequest req, HttpServletResponse resp, String url) {
		RequestDispatcher rd = req.getRequestDispatcher(url);
		try {
			rd.forward(req, resp);
		} catch (ServletException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
